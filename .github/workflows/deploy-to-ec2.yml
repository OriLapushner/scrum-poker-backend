name: Deploy to EC2

on:
  push:
    branches: ['master']

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  CONTAINER_PORT: ${{ vars.CONTAINER_PORT }}
  HOST_PORT: ${{ vars.HOST_PORT }}
  SERVER_PORT: ${{ vars.CONTAINER_PORT }}
  CORS_ORIGIN: ${{ vars.CORS_ORIGIN }}
  SSL_SECRET_NAME: ${{ vars.SSL_SECRET_NAME }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v6
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Set image details
        id: image-details
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Retrieve SSL certificate from AWS Secrets Manager
        id: ssl-cert
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            SSL_CERT_SECRET, ${{ env.SSL_SECRET_NAME }}
          parse-json-secrets: true

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          ssh ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "
            # Login to ECR
            sudo aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # Pull the latest image
            sudo docker pull ${{ steps.image-details.outputs.image }}
            
            # Stop and remove the existing container if it exists
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true
            
            # Run the new container
            sudo docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
              -e PORT=${{ env.SERVER_PORT }} \
              -e CORS_ORIGIN=${{ env.CORS_ORIGIN }} \
              -e SSL_CERT='${{ env.SSL_CERT_SECRET_CERTIFICATE }}' \
              -e SSL_PRIVKEY='${{ env.SSL_CERT_SECRET_PRIVKEY }}' \
              -e SSL_FULLCHAIN='${{ env.SSL_CERT_SECRET_FULLCHAIN }}' \
              -e SSL_ENABLED=true \
              --restart unless-stopped \
              ${{ steps.image-details.outputs.image }}
            
            # Clean up unused images
            sudo docker image prune -af
            
            # Verify deployment
            echo 'Deployment completed. Container status:'
            sudo docker ps | grep ${{ env.CONTAINER_NAME }}
          "
